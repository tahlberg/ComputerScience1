#include <iostream>
#include "lpcgraphics.h"
#include <ctime>
#include <cstdlib>
#include <vector>
#include <cmath>
using namespace std;

///Structs

struct Student
{
    string name;
    int idnum;
    double quizAverage;
    char grade;
};

///Tasks
void Task1();
void Task2();
void Task3();

//Task 1
void GetStudentData(Student & s);
void ReturnStudentData(Student s, int ID);

//Task 2
struct Bunny
{
    int x;
    int y;
    int s;
};
void SetupBunny(Bunny & b, GraphicsWindow w);
void MoveBunny(Bunny & b);

//Task 3
struct Planet
{
    int x;
    int y;
    int r;
    Color c;
};
void SetupPlanet(Planet & p);
void DrawPlanet(Planet p, GraphicsWindow & w);
double Distance(int x1, int y1, int x2, int y2);

int main()
{
    int mChoice;
    while(true)
    {
        cout << "Please select a task:" << endl;
        cout << "1. Task 1" << endl;
        cout << "2. Task 2" << endl;
        cout << "2. Task 3" << endl;
        cin >> mChoice;
        switch(mChoice)
        {
        case 1:
            Task1();
            break;
        case 2:
            Task2();
            break;
        case 3:
            Task3();
            break;
        }
    }
}

void Task1()
{
    vector<Student> students;
    int numStudent;
    int sID;
    cout << "How many students are there?" << endl;
    cin >> numStudent;
    cin.ignore(32768, '\n');
    for(int i = 0; i < numStudent; i++)
    {
        Student stud;
        GetStudentData(stud);
        cin.ignore(32768, '\n');
        students.push_back(stud);
    }
    cout << "Please enter a student ID. Enter -1 to stop." << endl;
    cin >> sID;
    while(sID != -1)
    {
        for(int i = 0; i < students.size(); i++)
        {
            ReturnStudentData(students[i], sID);
            cout << "Please enter a student iD: " << endl;
            cin >> sID;
        }
    }
}

void GetStudentData(Student & s)
{
    double scores[5];
    double sTotal = 0.0;
    cout << "Student Name: ";
    getline(cin, s.name);
    cout << "Student ID: ";
    cin >> s.idnum;
    for(int i = 0; i < 5; i++)
    {
        cout << "Quiz " << i+1 << ": ";
        cin >> scores[i];
        sTotal += scores[i];
    }
    s.quizAverage = (sTotal / 5.0);
    if(s.quizAverage >= 90)
    {
        s.grade = 'A';
    }
    else if(s.quizAverage >= 80)
    {
        s.grade = 'B';
    }
    else if(s.quizAverage >= 70)
    {
        s.grade = 'C';
    }
    else if(s.quizAverage >= 60)
    {
        s.grade = 'D';
    }
    else
    {
        s.grade = 'F';
    }
}

void ReturnStudentData(Student s, int ID)
{
    if(s.idnum == ID)
    {
        cout << left << setw(15) << "Name: " << s.name << endl;
        cout << left << setw(15) << "Quiz Average: " << s.quizAverage << endl;
        cout << left << setw(15) << "Grade: " << s.grade << endl;
    }
    else if(s.idnum != ID)
    {
        cout << "Not found" << endl;
    }
}

void Task2()
{
    srand(time(0));
    vector<Bunny> bunnies;
    GraphicsWindow win(800, 600, "Bunnies!");
    bool mouseWasDown = false;
    while(win.KeyPressed("Q") == false && win.KeyPressed("q") == false)
    {
        if(mouseWasDown == false && win.MouseIsDown() == true)
        {
            cout << "part 1" << endl;
            Bunny newBunny;
            SetupBunny(newBunny, win);
            bunnies.push_back(newBunny);
            mouseWasDown = true;
        }
        for(int i = 0; i < bunnies.size(); i++)
        {
            cout << "Part 2." << i << endl;
            win.DrawRectangle(bunnies[i].x, bunnies[i].y, 50, 50, Color(0, 0, 0), true);
            win.Refresh();
        }
        for(int n = 0; n < bunnies.size(); n++)
        {
            cout << "Part 3." << n << endl;
            MoveBunny(bunnies[n]);
        }
        for(int t = 0; t < bunnies.size(); t++)
        {
            cout << "Part 4." << t << endl;
            win.DrawImage("bunny.bmp", bunnies[t].x, bunnies[t].y, 50, 50);
            cout << "Draw success" << endl;
            win.Refresh();
            cout << "Render success" << endl;
        }
        cout << "Part 5" << endl;
        win.Refresh();
        win.Pause(0.1);
    }
}

void SetupBunny(Bunny & b, GraphicsWindow w)
{
    b.x = w.MouseX();
    b.y = w.MouseY();
    b.s = rand()%20+1;
}

void MoveBunny(Bunny & b)
{
    b.y += b.s;
    if(b.y > 600 || b.y < 0)
    {
        b.y *= -1;
    }
}

void Task3()
{
    Planet planets[10];
    int pClicked;
    GraphicsWindow win(800, 600, "SPAAAAAAAAAAAAAAAAAAACE!");
    srand(time(0));
    for(int i = 0; i < 10; i++)
    {
        SetupPlanet(planets[i]);
    }
    while(pClicked < 10)
    {
        for(int i = 0; i < 10; i++)
        {
            DrawPlanet(planets[i], win);
            win.Refresh();
        }
        win.WaitForMouseUp();
        win.WaitForMouseDown();
        for(int i = 0; i < 10; i++)
        {
            if(Distance(win.MouseX(), win.MouseY(), planets[i].x, planets[i].y) < planets[i].r)
            {
                planets[i].c = Color(0, 0, 0);
                DrawPlanet(planets[i], win);
                planets[i].r = 0;
                win.Refresh();
                pClicked++;
            }
        }
    }
    win.DrawString("LEVEL COMPLETE", 200, 300, Color(255, 255, 255), 48);
    win.Refresh();
    win.WaitForKeyPress();
}

void SetupPlanet(Planet & p)
{
    p.x = rand()%800;
    p.y = rand()%600;
    p.r = rand()%50+30;
    p.c = Color(rand()%256, rand()%256, rand()%256);
}

void DrawPlanet(Planet p, GraphicsWindow & w)
{
    w.DrawCircle(p.x, p.y, p.r, p.c, true);
}

double Distance(int x1, int y1, int x2, int y2)
{
    return (sqrt(pow(x1-x2, 2.0) + pow(y1-y2, 2.0)));
}
